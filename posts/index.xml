<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>📚文章 on Zxq&#39;s Site</title>
    <link>https://oxygenbytes.github.io/posts/</link>
    <description>Recent content in 📚文章 on Zxq&#39;s Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-en</language>
    <lastBuildDate>Sun, 13 Jun 2021 20:43:09 +0800</lastBuildDate><atom:link href="https://oxygenbytes.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C&#43;&#43;标准模板库STL</title>
      <link>https://oxygenbytes.github.io/posts/cplus/c&#43;&#43;%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93stl/</link>
      <pubDate>Sun, 13 Jun 2021 20:43:09 +0800</pubDate>
      
      <guid>https://oxygenbytes.github.io/posts/cplus/c&#43;&#43;%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93stl/</guid>
      <description>注： size()、empty()是所有容器都有的，时间复杂度为 O(1)，并不是结果并非遍历得到，而是原本就有个变 量来存size，直接访问该变</description>
    </item>
    
    <item>
      <title>整数二分算法模板</title>
      <link>https://oxygenbytes.github.io/posts/template/%E6%95%B4%E6%95%B0%E4%BA%8C%E5%88%86%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/</link>
      <pubDate>Sun, 13 Jun 2021 20:20:31 +0800</pubDate>
      
      <guid>https://oxygenbytes.github.io/posts/template/%E6%95%B4%E6%95%B0%E4%BA%8C%E5%88%86%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/</guid>
      <description>bool check(int x) {/* ... */} // 检查x是否满足某种性质 // 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用： int bsearch_1(int l, int r) { while (l &amp;lt; r) { int mid = l + r &amp;gt;&amp;gt; 1; if</description>
    </item>
    
    <item>
      <title>归并排序模板</title>
      <link>https://oxygenbytes.github.io/posts/template/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E6%A8%A1%E6%9D%BF/</link>
      <pubDate>Sun, 13 Jun 2021 20:17:34 +0800</pubDate>
      
      <guid>https://oxygenbytes.github.io/posts/template/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E6%A8%A1%E6%9D%BF/</guid>
      <description>void merge_sort(int q[], int l, int r) { if (l &amp;gt;= r) return; int mid = l + r &amp;gt;&amp;gt; 1; merge_sort(q, l, mid); merge_sort(q, mid + 1, r); int k = 0, i = l, j = mid + 1; while (i &amp;lt;= mid &amp;amp;&amp;amp; j &amp;lt;= r) if (q[i] &amp;lt;= q[j]) tmp[k ++ ] = q[i ++ ]; else tmp[k ++ ] = q[j ++ ]; while (i</description>
    </item>
    
    <item>
      <title>快速排序模板</title>
      <link>https://oxygenbytes.github.io/posts/template/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E6%A8%A1%E6%9D%BF/</link>
      <pubDate>Sun, 13 Jun 2021 20:16:14 +0800</pubDate>
      
      <guid>https://oxygenbytes.github.io/posts/template/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E6%A8%A1%E6%9D%BF/</guid>
      <description>void quick_sort(int q[], int l, int r) { if (l &amp;gt;= r) return; int i = l - 1, j = r + 1, x = q[l + r &amp;gt;&amp;gt; 1]; while (i &amp;lt; j) { do i ++ ; while (q[i] &amp;lt; x); do j -- ; while (q[j] &amp;gt; x); if (i &amp;lt; j) swap(q[i], q[j]); } quick_sort(q, l, j), quick_sort(q, j + 1, r); }</description>
    </item>
    
    <item>
      <title>快速幂模板</title>
      <link>https://oxygenbytes.github.io/posts/template/%E5%BF%AB%E9%80%9F%E5%B9%82%E6%A8%A1%E6%9D%BF/</link>
      <pubDate>Sun, 13 Jun 2021 20:07:37 +0800</pubDate>
      
      <guid>https://oxygenbytes.github.io/posts/template/%E5%BF%AB%E9%80%9F%E5%B9%82%E6%A8%A1%E6%9D%BF/</guid>
      <description>求 $ m^k \bmod p $ int qmi(int m, int k, int p) { int res = 1 % p, t = m; while (k) { if (k&amp;amp;1) res = res * t % p; t = t * t % p; k &amp;gt;&amp;gt;= 1; } return res; }</description>
    </item>
    
    <item>
      <title>高途跟谁学面试复盘</title>
      <link>https://oxygenbytes.github.io/posts/interview/%E9%AB%98%E9%80%94%E8%B7%9F%E8%B0%81%E5%AD%A6%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98/</link>
      <pubDate>Mon, 10 May 2021 22:49:50 +0800</pubDate>
      
      <guid>https://oxygenbytes.github.io/posts/interview/%E9%AB%98%E9%80%94%E8%B7%9F%E8%B0%81%E5%AD%A6%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98/</guid>
      <description>笔试 忘了，似乎是五道题，有一道最长递增子序列没做出来（因为还让打印出序列），后来还被面试官拿出来鞭尸。。。其他简单题都做出来了 时间比较久了，</description>
    </item>
    
    <item>
      <title>美团优选面试复盘</title>
      <link>https://oxygenbytes.github.io/posts/interview/%E7%BE%8E%E5%9B%A2%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98/</link>
      <pubDate>Tue, 20 Apr 2021 19:22:23 +0800</pubDate>
      
      <guid>https://oxygenbytes.github.io/posts/interview/%E7%BE%8E%E5%9B%A2%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98/</guid>
      <description>时间比较久了，重点记一下算法题和答的不好的问题 笔试 忘记了，大概是4道编程题，全是ACM类型的题目，最后做出来1.4道，进面试了 一面 介绍自己 讲</description>
    </item>
    
    <item>
      <title>华为面试复盘</title>
      <link>https://oxygenbytes.github.io/posts/interview/%E5%8D%8E%E4%B8%BA%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98/</link>
      <pubDate>Fri, 02 Apr 2021 21:54:01 +0800</pubDate>
      
      <guid>https://oxygenbytes.github.io/posts/interview/%E5%8D%8E%E4%B8%BA%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98/</guid>
      <description>投递之后一直无消息，后来被华为财经部门捞了，面试的职位是 财经数字化工程师，凭印象简单写写 笔试（2021.03.24） 3道算法题, 第一题AC，</description>
    </item>
    
    <item>
      <title>Shoppe面试复盘</title>
      <link>https://oxygenbytes.github.io/posts/interview/shoppe%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98/</link>
      <pubDate>Fri, 02 Apr 2021 09:35:00 +0800</pubDate>
      
      <guid>https://oxygenbytes.github.io/posts/interview/shoppe%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98/</guid>
      <description>笔试（2021.03.10） 笔试应该是春招最早的几批，当天Shoppe的笔试平台还崩掉了，在牛客网上还有不少吐嘈，不过不久就恢复正常了，有一</description>
    </item>
    
    <item>
      <title>字节跳动面试复盘</title>
      <link>https://oxygenbytes.github.io/posts/interview/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98/</link>
      <pubDate>Tue, 09 Mar 2021 12:46:52 +0800</pubDate>
      
      <guid>https://oxygenbytes.github.io/posts/interview/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98/</guid>
      <description>一面（2021-02-24 18:00，1小时10分钟） 介绍自己 介绍项目，针对项目细节进行提问 浏览器输入一个地址，后面发生了什么？ 进程间通讯方</description>
    </item>
    
    <item>
      <title>排序算法</title>
      <link>https://oxygenbytes.github.io/posts/algorithms/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link>
      <pubDate>Wed, 03 Mar 2021 22:35:34 +0800</pubDate>
      
      <guid>https://oxygenbytes.github.io/posts/algorithms/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid>
      <description>冒泡排序 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; void bubblesort(vector&amp;lt;int&amp;gt;&amp;amp; nums){ int n = nums.size(); for(int i = n - 1;i &amp;gt; 0;i--){ for(int j = 0;j &amp;lt; i;j++){ if(nums[j] &amp;gt; nums[j+1]) swap(nums[j], nums[j+1]); } } } int main(){ vector&amp;lt;int&amp;gt; nums(10); srand(unsigned(time(0))); // srand((unsigned)time(NULL)) 也可以 for(int i = 0;i &amp;lt; 10;i++){ nums[i] = rand() % 20; cout&amp;lt;&amp;lt;nums[i]&amp;lt;&amp;lt;&amp;#34; &amp;#34;; } cout&amp;lt;&amp;lt;endl; bubblesort(nums); for(auto x : nums) cout&amp;lt;&amp;lt;x&amp;lt;&amp;lt;&amp;#34; &amp;#34;;</description>
    </item>
    
    <item>
      <title>蓝湖面试复盘</title>
      <link>https://oxygenbytes.github.io/posts/interview/%E8%93%9D%E6%B9%96%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98/</link>
      <pubDate>Wed, 03 Mar 2021 19:46:52 +0800</pubDate>
      
      <guid>https://oxygenbytes.github.io/posts/interview/%E8%93%9D%E6%B9%96%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98/</guid>
      <description>时间比较久了，重点记一下算法题和答的不好的问题 一面 算法题：实现整数的sqrt函数， 使用二分法做 二面 算法题：算法题找出一个数组中，出现次数最多</description>
    </item>
    
    <item>
      <title>C&#43;&#43;对象模型</title>
      <link>https://oxygenbytes.github.io/posts/cplus/c&#43;&#43;%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Tue, 23 Feb 2021 17:38:43 +0800</pubDate>
      
      <guid>https://oxygenbytes.github.io/posts/cplus/c&#43;&#43;%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/</guid>
      <description>什么是C++对象模型? 语言中直接支持面向对象程序设计的部分。 对于各种支持的底层实现机制。 对象模型研究的是对象在存储上的空间与时间上的更优，并</description>
    </item>
    
    <item>
      <title>Docker 学习</title>
      <link>https://oxygenbytes.github.io/posts/linux/docker/</link>
      <pubDate>Sat, 30 Jan 2021 21:49:10 +0800</pubDate>
      
      <guid>https://oxygenbytes.github.io/posts/linux/docker/</guid>
      <description>一、解决的问题 由于不同的机器有不同的操作系统，以及不同的库和组件，在将一个应用部署到多台机器上需要进行大量的环境配置操作。 Docker 主要解决环境配置</description>
    </item>
    
    <item>
      <title>Git 学习</title>
      <link>https://oxygenbytes.github.io/posts/linux/git/</link>
      <pubDate>Sat, 30 Jan 2021 21:49:10 +0800</pubDate>
      
      <guid>https://oxygenbytes.github.io/posts/linux/git/</guid>
      <description>Git 学习 主要记录一些git学习的笔记内容 git学习链接 git分支管理 新建分支 git checkout -b branchname 切换分支 git checkout branchname 查看分支 git branch 比如你现在在dev，克隆下来的是</description>
    </item>
    
    <item>
      <title>Linux 学习</title>
      <link>https://oxygenbytes.github.io/posts/linux/linux/</link>
      <pubDate>Sat, 30 Jan 2021 21:49:10 +0800</pubDate>
      
      <guid>https://oxygenbytes.github.io/posts/linux/linux/</guid>
      <description>一、常用操作以及概念 快捷键 Tab：命令和文件名补全； Ctrl+C：中断正在运行的程序； Ctrl+D：结束键盘输入（End Of File，EOF）</description>
    </item>
    
    <item>
      <title>二分算法</title>
      <link>https://oxygenbytes.github.io/posts/algorithms/%E4%BA%8C%E5%88%86%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 30 Jan 2021 21:49:10 +0800</pubDate>
      
      <guid>https://oxygenbytes.github.io/posts/algorithms/%E4%BA%8C%E5%88%86%E7%AE%97%E6%B3%95/</guid>
      <description>二分算法 二分模板 二分模板一共有两个，分别适用于不同情况。 版本1 当我们将区间[l, r]划分成[l, mid]和[mid + 1, r]时，其更新操作是r</description>
    </item>
    
    <item>
      <title>Java IO</title>
      <link>https://oxygenbytes.github.io/posts/java/java-io/</link>
      <pubDate>Tue, 27 Oct 2020 23:06:27 +0800</pubDate>
      
      <guid>https://oxygenbytes.github.io/posts/java/java-io/</guid>
      <description>一、概览 Java 的 I/O 大概可以分成以下几类： 磁盘操作：File 字节操作：InputStream 和 OutputStream 字符操作：Reader 和 Writer 对象操作：Seriali</description>
    </item>
    
    <item>
      <title>Java 基础</title>
      <link>https://oxygenbytes.github.io/posts/java/java-%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Tue, 27 Oct 2020 23:06:27 +0800</pubDate>
      
      <guid>https://oxygenbytes.github.io/posts/java/java-%E5%9F%BA%E7%A1%80/</guid>
      <description>一、数据类型 基本类型 byte/8 char/16 short/16 int/32 float/32 long/64 double/64 boolean/~ boolean 只有两个值：true、false，可以使用 1 bit 来存储，但是具体大小没有明确规定。JVM 会在编译时期将 boolean</description>
    </item>
    
    <item>
      <title>Java 容器</title>
      <link>https://oxygenbytes.github.io/posts/java/java-%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Tue, 27 Oct 2020 23:06:27 +0800</pubDate>
      
      <guid>https://oxygenbytes.github.io/posts/java/java-%E5%AE%B9%E5%99%A8/</guid>
      <description>一、概览 容器主要包括 Collection 和 Map 两种，Collection 存储着对象的集合，而 Map 存储着键值对（两个对象）的映射表。 1. Set TreeSet：基于红黑树实</description>
    </item>
    
    <item>
      <title>Java 网络编程</title>
      <link>https://oxygenbytes.github.io/posts/java/java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Tue, 27 Oct 2020 23:06:27 +0800</pubDate>
      
      <guid>https://oxygenbytes.github.io/posts/java/java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</guid>
      <description>HTTP请求过程 以www.baidu.com为例子 1.chrome自己的缓存,存留时间大概1min Notes:chrome://net-in</description>
    </item>
    
    <item>
      <title>二叉树的遍历算法</title>
      <link>https://oxygenbytes.github.io/posts/algorithms/binarytreetraversal/</link>
      <pubDate>Sun, 30 Aug 2020 21:49:10 +0800</pubDate>
      
      <guid>https://oxygenbytes.github.io/posts/algorithms/binarytreetraversal/</guid>
      <description>二叉树的遍历算法是理解递归和搜索的关键算法，也可以用来思考程序状态问题和分类讨论思想。 二叉树的先序遍历 非递归版本 class Solution { public: vector&amp;lt;int&amp;gt; preorderTraversal(TreeNode* root) { if(!root) return {}; vector&amp;lt;int&amp;gt; result; stack&amp;lt;TreeNode*&amp;gt;</description>
    </item>
    
    <item>
      <title>Termux 使用指南</title>
      <link>https://oxygenbytes.github.io/posts/linux/termux/</link>
      <pubDate>Wed, 12 Aug 2020 09:30:07 +0800</pubDate>
      
      <guid>https://oxygenbytes.github.io/posts/linux/termux/</guid>
      <description>安装 Termux 是一款基于 Android 平台的开源 Linux 终端模拟器，使用 pkg(apt) 进行软件包的管理。可以在 Google play 安装最新版的 termux 和 termux-API 。Termux 支持缩放手势来调整字体大小，长按</description>
    </item>
    
    <item>
      <title>线性代数的本质</title>
      <link>https://oxygenbytes.github.io/posts/math/linearalgebra/</link>
      <pubDate>Thu, 06 Aug 2020 19:42:44 +0800</pubDate>
      
      <guid>https://oxygenbytes.github.io/posts/math/linearalgebra/</guid>
      <description>1p 什么是向量？ 定义坐标系 物理系，计算机系，数学系对向量的不同认识 向量可以是任何东西，只要保证两个向量相加以及数字与向量想成是有意义的即可。 可</description>
    </item>
    
    <item>
      <title>计算机网络中的经典问题</title>
      <link>https://oxygenbytes.github.io/posts/linux/computernetwork/</link>
      <pubDate>Thu, 06 Aug 2020 19:25:42 +0800</pubDate>
      
      <guid>https://oxygenbytes.github.io/posts/linux/computernetwork/</guid>
      <description>传输层：TCP和UDP 什么是三次握手？ 什么是四次挥手？ TCP如何实现流量控制？ TCP的拥塞控制是怎么实现的？ TCP与UDP的区别 TCP如何保</description>
    </item>
    
    <item>
      <title>深搜&amp;&amp;广搜</title>
      <link>https://oxygenbytes.github.io/posts/algorithms/bfsdfs/</link>
      <pubDate>Mon, 27 Jul 2020 23:06:27 +0800</pubDate>
      
      <guid>https://oxygenbytes.github.io/posts/algorithms/bfsdfs/</guid>
      <description>深搜和广搜是最重要的几种算法之一，理解深搜和广搜的关键在于理解 递归 ， 状态机 ， 容器适配器--堆&amp;amp;&amp;amp;栈 和 集合分类 四个概念。 在搜索</description>
    </item>
    
    <item>
      <title>C&#43;&#43;内存模型</title>
      <link>https://oxygenbytes.github.io/posts/cplus/c&#43;&#43;%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Thu, 27 Jun 2019 09:06:27 +0800</pubDate>
      
      <guid>https://oxygenbytes.github.io/posts/cplus/c&#43;&#43;%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</guid>
      <description>内存模型所要表达的内容主要是这么描述： 一个内存操作的效果，在其他线程中的可见性问题。 C++ 内存模型 C分为四个区：堆，栈，静态全局变量区，常量区 C</description>
    </item>
    
    <item>
      <title>C&#43;&#43;基础知识</title>
      <link>https://oxygenbytes.github.io/posts/cplus/c&#43;&#43;%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Thu, 27 Jun 2019 09:06:27 +0800</pubDate>
      
      <guid>https://oxygenbytes.github.io/posts/cplus/c&#43;&#43;%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>const常引用（const + &amp;amp;）避免函数参数的双向传递 在c++可以使用引用传递作为函数的形参传入函数，相较于值传递的方式，引用传递</description>
    </item>
    
    <item>
      <title>C&#43;&#43;输入输出</title>
      <link>https://oxygenbytes.github.io/posts/cplus/c&#43;&#43;%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</link>
      <pubDate>Thu, 27 Jun 2019 09:06:27 +0800</pubDate>
      
      <guid>https://oxygenbytes.github.io/posts/cplus/c&#43;&#43;%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</guid>
      <description>使用cin来读取数据 ​cin 基本用法 ​cin遇到缓冲区中的[enter],[space],[tab]会结束当前输入，并舍弃[enter],[</description>
    </item>
    
    <item>
      <title>侯捷C&#43;&#43;程序设计</title>
      <link>https://oxygenbytes.github.io/posts/cplus/%E4%BE%AF%E6%8D%B7c&#43;&#43;%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Thu, 27 Jun 2019 09:06:27 +0800</pubDate>
      
      <guid>https://oxygenbytes.github.io/posts/cplus/%E4%BE%AF%E6%8D%B7c&#43;&#43;%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</guid>
      <description>课程链接 基本语法知识 &amp;lt;iostream&amp;gt; 尖括号是使用标准头文件 &amp;ldquo;matrix.h&amp;rdquo; 调用自给定头文件 构造函数可以重载(overload) 对于没有用到指针的类，一般不用写析构函数 构</description>
    </item>
    
    <item>
      <title>剪绳子问题</title>
      <link>https://oxygenbytes.github.io/posts/algorithms/cutrode/</link>
      <pubDate>Fri, 05 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oxygenbytes.github.io/posts/algorithms/cutrode/</guid>
      <description>题目描述 给你一根长度为n的绳子，请把绳子剪成整数长的m段（m、n都是整数，n&amp;gt;1并且m&amp;gt;1），每段绳子的长度记为k[0],k[1</description>
    </item>
    
  </channel>
</rss>
