<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cplus on Zxq&#39;s Blog</title>
    <link>https://oxygenbytes.github.io/tags/cplus/</link>
    <description>Recent content in Cplus on Zxq&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://oxygenbytes.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cd /home/zxq/&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 23 Feb 2021 17:38:43 +0800</lastBuildDate><atom:link href="https://oxygenbytes.github.io/tags/cplus/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C&#43;&#43;对象模型</title>
      <link>https://oxygenbytes.github.io/posts/2021/02/c-%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Tue, 23 Feb 2021 17:38:43 +0800</pubDate>
      
      <guid>https://oxygenbytes.github.io/posts/2021/02/c-%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/</guid>
      <description>什么是C++对象模型?  语言中直接支持面向对象程序设计的部分。 对于各种支持的底层实现机制。  对象模型研究的是对象在存储上的空间与时间上的更优，并对C++面向对象技术加以支持，如以虚指针、虚表机制支持多态特性。
理解虚函数表 C++中虚函数的作用主要是为了实现多态机制。多态，简单来说，是指在继承层次中，父类的指针可以具有多种形态——当它指向某个子类对象时，通过它能够调用到子类的函数，而非父类的函数。
#include &amp;lt;iostream&amp;gt;using namespace std; class Base { public: virtual void print(){ cout&amp;lt;&amp;lt;&amp;#34;Base&amp;#34;&amp;lt;&amp;lt;endl;}; }; class Derive : public Base{ public: virtual void print(){cout&amp;lt;&amp;lt;&amp;#34;Derive&amp;#34;&amp;lt;&amp;lt;endl;}; }; int main(){ Base* ptr1 = new Base; Base* ptr2 = new Derive; ptr1-&amp;gt;print(); // Base::print();  ptr2-&amp;gt;print(); // Derive::print();  return 0; } 这是一种运行期多态，即父类指针唯有在程序运行时才能知道所指的真正类型是什么。这种运行期决议，是通过虚函数表来实现的。
使用指针访问虚表 #include &amp;lt;iostream&amp;gt;using namespace std; class Base { private: int a; public: virtual void test(){ cout&amp;lt;&amp;lt;&amp;#34;test&amp;#34;&amp;lt;&amp;lt;endl; } virtual void print(){ cout&amp;lt;&amp;lt;&amp;#34;Base&amp;#34;&amp;lt;&amp;lt;endl;} }; typedef void(*Func)(void); int main(){ Base b; int * vptrAdree = (int *)(&amp;amp;b); cout&amp;lt;&amp;lt;vptrAdree&amp;lt;&amp;lt;endl; Func fun = (Func)*(int * )(*(int*)(&amp;amp;b)+8); fun(); // Base  return 0; } 我们强行把类对象的地址转换为 int* 类型，取得了虚函数指针的地址。虚函数指针指向虚函数表,虚函数表中存储的是一系列虚函数的地址，虚函数地址出现的顺序与类中虚函数声明的顺序一致。对虚函数指针地址值，可以得到虚函数表的地址，也即是虚函数表第二个虚函数的地址。</description>
    </item>
    
  </channel>
</rss>
