<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>二分 on Zxq&#39;s Blog</title>
    <link>https://oxygenbytes.github.io/tags/%E4%BA%8C%E5%88%86/</link>
    <description>Recent content in 二分 on Zxq&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://oxygenbytes.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cd /home/zxq/&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 30 Jan 2021 21:49:10 +0800</lastBuildDate><atom:link href="https://oxygenbytes.github.io/tags/%E4%BA%8C%E5%88%86/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>二分算法</title>
      <link>https://oxygenbytes.github.io/posts/2021/01/%E4%BA%8C%E5%88%86%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 30 Jan 2021 21:49:10 +0800</pubDate>
      
      <guid>https://oxygenbytes.github.io/posts/2021/01/%E4%BA%8C%E5%88%86%E7%AE%97%E6%B3%95/</guid>
      <description>二分算法 二分模板 二分模板一共有两个，分别适用于不同情况。
版本1 当我们将区间[l, r]划分成[l, mid]和[mid + 1, r]时，其更新操作是r = mid或者l = mid + 1;，计算mid时不需要加1。 C++ 代码模板：
int bsearch_1(int l, int r) { while (l &amp;lt; r) { int mid = l + r &amp;gt;&amp;gt; 1; if (check(mid)) r = mid; else l = mid + 1; } return l; } 版本2 当我们将区间[l, r]划分成[l, mid - 1]和[mid, r]时，其更新操作是r = mid - 1或者l = mid;，此时为了防止死循环，计算mid时需要加1。 C++ 代码模板：
int bsearch_2(int l, int r) { while (l &amp;lt; r) { int mid = l + r + 1 &amp;gt;&amp;gt; 1; if (check(mid)) l = mid; else r = mid - 1; } return l; } 使用心的  假设有一个总区间，经由我们的 check 函数判断后，可分成两部分， 若以o作 true，&amp;hellip;.</description>
    </item>
    
  </channel>
</rss>
