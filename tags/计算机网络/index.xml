<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>计算机网络 on Zxq&#39;s Blog</title>
    <link>https://oxygenbytes.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link>
    <description>Recent content in 计算机网络 on Zxq&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://oxygenbytes.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cd /home/zxq/&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 06 Aug 2020 19:25:42 +0800</lastBuildDate><atom:link href="https://oxygenbytes.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>计算机网络中的经典问题</title>
      <link>https://oxygenbytes.github.io/posts/2020/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 06 Aug 2020 19:25:42 +0800</pubDate>
      
      <guid>https://oxygenbytes.github.io/posts/2020/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98/</guid>
      <description>传输层：TCP和UDP  什么是三次握手？ 什么是四次挥手？ TCP如何实现流量控制？ TCP的拥塞控制是怎么实现的？ TCP与UDP的区别 TCP如何保证传输的可靠性   应用层：HTTP和HTTPS  HTTP和HTTPS有什么区别？ GET与POST的区别？ Session与Cookie的区别？ 从输入网址到获得页面的过程 (越详细越好)？ HTTP请求有哪些常见状态码？ 什么是RIP (距离矢量路由协议)?   计算机网络体系结构 网络层协议  IP地址的分类？ 什么叫划分子网？ 什么是ARP协议？ 什么是NAT (网络地址转换)？     什么是三次握手 (three-way handshake)？  第一次握手：Client将SYN置1，随机产生一个初始序列号seq发送给Server，进入SYN_SENT状态； 第二次握手：Server收到Client的SYN=1之后，知道客户端请求建立连接，将自己的SYN置1，ACK置1，产生一个acknowledge number=sequence number+1，并随机产生一个自己的初始序列号，发送给客户端；进入SYN_RCVD状态； 第三次握手：客户端检查acknowledge number是否为序列号+1，ACK是否为1，检查正确之后将自己的ACK置为1，产生一个acknowledge number=服务器发的序列号+1，发送给服务器；进入ESTABLISHED状态；服务器检查ACK为1和acknowledge number为序列号+1之后，也进入ESTABLISHED状态；完成三次握手，连接建立。  TCP建立连接可以两次握手吗？为什么? 不可以。有两个原因： 首先，可能会出现已失效的连接请求报文段又传到了服务器端。
 client 发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达 server。本来这是一个早已失效的报文段。但 server 收到此失效的连接请求报文段后，就误认为是 client 再次发出的一个新的连接请求。于是就向 client 发出确认报文段，同意建立连接。假设不采用 “三次握手”，那么只要 server 发出确认，新的连接就建立了。由于现在 client 并没有发出建立连接的请求，因此不会理睬 server 的确认，也不会向 server 发送数据。但 server 却以为新的运输连接已经建立，并一直等待 client 发来数据。这样，server 的很多资源就白白浪费掉了。采用 “三次握手” 的办法可以防止上述现象发生。例如刚才那种情况，client 不会向 server 的确认发出确认。server 由于收不到确认，就知道 client 并没有要求建立连接。</description>
    </item>
    
  </channel>
</rss>
